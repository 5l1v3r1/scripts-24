#!/usr/bin/env python3

# Convert HTML pages to PDF.
# Copyright 2017 by Akkana Peck -- share and enjoy under the GPL v2 or later.

# To convert all the output files into a single multi-page PDF, use this:
# gs -dNOPAUSE -sDEVICE=pdfwrite -sOUTPUTFILE=multipage.pdf -dBATCH file*.pdf

# Parameters that should be specifiable on the commandline.
# Currently only the resolution is.
x_res = 1024
outdir = "pdf"

import sys

from PyQt5.QtCore import QUrl, QSizeF, QMarginsF
from PyQt5.QtWidgets import QApplication
from PyQt5.QtWebEngineWidgets import QWebEnginePage, QWebEngineProfile
from PyQt5.QtGui import QPageLayout, QPageSize

from PyPDF2 import PdfFileMerger
from io import BytesIO

class HeadlessPagePrinter():
    def __init__(self, app):
        self.profile = QWebEngineProfile()
        self.webpage = QWebEnginePage(self.profile, app)
        self.webpage.loadFinished.connect(self.load_finished)

        self.print_finished = None

    def load_url(self, url, print_finished):
        '''print_finished is a callback called with a QString
           of the PDF bytes 'printed'.
        '''
        self.print_finished = print_finished
        self.webpage.load(QUrl(url))

    def set_html(self, html):
        self.webpage.setHtml(html)

    def load_finished(self, ok):
        print("Load finished ... trying to print")
        # contentsSize is always 0x0. Not clear if it's supposed to be useful.
        # print("Contents size is %f x %f" %
        #       (self.webpage.contentsSize().width(),
        #        self.webpage.contentsSize().height()))
        self.print_page()

    def print_page(self):
        filename = "/tmp/test.pdf"

        margins = QMarginsF(0, 0, 0, 0)
        DPMM = 3.54
        # 1024/DPMM, 768/DPMM  --> 290, 217
        layout = QPageLayout(QPageSize(QSizeF(1024/DPMM, 768/DPMM),
                                       QPageSize.Millimeter),
                             QPageLayout.Portrait, margins,
                             QPageLayout.Millimeter, margins)

        print("print to pdf", filename)
        self.webpage.printToPdf(self.print_finished, layout)

class SlidePrinter:
    def __init__(self, app):
        self.renderer = HeadlessPagePrinter(app)

        # PdfFileMerger always fails with "Multiple definitions in dictionary"
        # unless you add strict=False.
        # https://github.com/mstamy2/PyPDF2/issues/244
        self.merger = PdfFileMerger(strict=False)

    def add_pages(self, urllist):
        self.urllist = urllist
        self.urlindex = 0
        self.next_page()

    def next_page(self):
        if self.urlindex >= len(self.urllist):
            print("All done")
            sys.exit(0)
        print("\n=== Rendering url", self.urlindex, ":",
              self.urllist[self.urlindex])
        self.renderer.load_url(self.urllist[self.urlindex],
                               self.print_finished)

    def print_finished(self, pdf_bytes):
        print("finished rendering to", len(pdf_bytes), "bytes")
        if pdf_bytes:
            filename = "/tmp/page%d.pdf" % self.urlindex
            with open(filename, "wb") as fp:
                fp.write(pdf_bytes)
                fp.close()
            bytes_fp = BytesIO(pdf_bytes.data())
            self.merger.append(bytes_fp)
        else:
            print("No output for", self.urllist[self.urlindex-1])

        self.urlindex += 1
        if self.urlindex >= len(self.urllist):
            print("\nTrying to save the merged file")
            filename = "/tmp/merged.pdf"
            with open(filename, "wb") as fp:
                self.merger.write(fp)
            print("Wrote", filename)
            sys.exit(0)

        else:
            self.next_page()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    # renderer = HeadlessPagePrinter(app)
    slideprinter = SlidePrinter(app)
    if len(sys.argv) > 1:
        slideprinter.add_pages(sys.argv[1:])
    else:
        print("what page?")
    app.exec_()

