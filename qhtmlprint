#! /usr/bin/env python

# Convert HTML pages to PDF.
# Copyright 2012 by Akkana Peck -- share and enjoy under the GPL v2 or later.
#
# Thx to http://notes.alexdong.com/xhtml-to-pdf-using-pyqt4-webkit-and-headless
#
# To convert all the output files into a single multi-page PDF, use this:
# gs -dNOPAUSE -sDEVICE=pdfwrite -sOUTPUTFILE=multipage.pdf -dBATCH file*.pdf

import sys, os
# from PyQt4.QtCore import QObject, QSizeF, SIGNAL, QUrl, QSize
# from PyQt4.QtGui import QApplication, QPrinter, QPageSize
# from PyQt4.QtWebKit import QWebView
# from PyQt5.QtCore import *
# from PyQt5.QtGui import *
# from PyQt5.QtWebKit import *

from PyQt5.QtCore import QObject, QUrl, QSize, QSizeF
from PyQt5.QtGui import QPageSize
from PyQt5.QtWidgets import QApplication
from PyQt5.QtWebKitWidgets import QWebView
from PyQt5.QtPrintSupport import QPrinter

from pyPdf import PdfFileWriter, PdfFileReader

# Parameters that should be specifiable on the commandline.
# Currently only the resolution is.
x_res = 1024
outdir = "pdf"

if len(sys.argv) < 2 :
    print "Usage: %s a.html b.html ..." % sys.argv[0]
    sys.exit(1)

# First check for flags. -1366 means include the whole 1366-pixel width
# instead of only the 1024 pixels the projector sees.
# You can specify other X resolutions there too.
if sys.argv[1][0] == '-' and sys.argv[1][1].isdigit() :
    x_res = int(sys.argv[1][1:])
    print "Using X resolution of", x_res
    sys.argv = sys.argv[1:]

pagelist = sys.argv[1:]
pagelistindex = 0
pdflist = []

app = QApplication(sys.argv)

web = QWebView()

# QPrinter always prints too small, and I can't figure out why.
# Empirically, I can get dot-for-dot with this zoom factor:
# Printing to 1366 (with speaker notes), use zoom factor 1.24.
# Printing to 1024 to remove the speaker notes, use zoom factor 2.0.
web.setZoomFactor(2.0)

# You can show the window, but it's not necessary:
#web.show()

printer = QPrinter(mode = QPrinter.ScreenResolution)
printer.setOutputFormat(QPrinter.PdfFormat)

# It's not clear what this does:
# printer.setFullPage(False)

printer.setPageMargins(0, 0, 0, 0, QPrinter.DevicePixel)
# printer.setPaperSize(QSizeF(x_res, 768), QPrinter.DevicePixel)

# setPaperSize is apparently obsolete, but it's not clear that
# setPageSize() can set custom page sizes.
# Nobody has an example of how to call setPageSize to find out
# what type it expects as its argument.
# printer.setPageSize(QPageSize(QSize(x_res, 768),
#                               QPrinter.DevicePixel))
# printer.setPageSize(QPageSize(QSizeF(x_res, 768), QPrinter.DevicePixel, "XGA"))
printer.setPageSize(QPageSize(QSizeF(x_res, 768), QPageSize.Millimeter, "XGA"))

# printer.setPageSize(1366)

# setPaperSize() no longer works in QPrinter. Try QPdfWriter instead.
# QPdfWriter pdfWriter("all.pdf");

def makeMultipage(outfile, inlist) :
    # Make a multi-page document from all the pages we've created:
    output = PdfFileWriter()
    for infile in inlist :
        inpdf = PdfFileReader(file(infile, "rb"))
        output.addPage(inpdf.getPage(0))

    # finally, write "output" to document-output.pdf
    outputStream = file(outfile, "wb")
    output.write(outputStream)
    outputStream.close()
    print 'Wrote all pages to', outfile

def print_next() :
    '''Print the page that has just loaded, then start the load
       of the next page in the list. Called from loadFinished signal.
    '''
    global pagelist, pagelistindex, web, printer

    outputfile = os.path.join(outdir, "file%03d.pdf" % pagelistindex)
    pdflist.append(outputfile)

    printer.setOutputFileName(outputfile)
    web.print_(printer)

    # pdfWriter.newPage();

    print "Generated", outputfile, "from", pagelist[pagelistindex]

    pagelistindex += 1
    if pagelistindex >= len(pagelist) :
        makeMultipage(os.path.join(outdir, 'all.pdf'), pdflist)

        print "Exiting"
        QApplication.exit()
        # That doesn't always work, so hedge our bets:
        sys.exit(0)

    # Load the next URL in the list
    print "Loading", pagelist[pagelistindex]
    web.load(QUrl(pagelist[pagelistindex]))

web.loadFinished.connect(print_next)
# QObject.connect(web, SIGNAL("loadFinished(bool)"), print_next)
web.load(QUrl(pagelist[pagelistindex]))

sys.exit(app.exec_())
