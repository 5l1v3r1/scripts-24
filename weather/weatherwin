#!/usr/bin/env python

# Print weather for several locations,
# given as city names or zip codes.
# Copyright 2013 by Akkana Peck: share and enjoy under the GPL v2 or later.

# Sample usage:
# weatherwin 'White Rock, NM' 'Los Alamos, NM' 'Cortez, CO' 'Fallbrook, CA' 'Lompoc, CA' 95128
# Note for testing -- sometimes get_location_ids breaks,
# so if you need it, 'San Jose, CA' is u'USCA0987'

import sys, os
import pywapi
import gtk, gobject
import pango
from pprint import pprint

# What sources should we use? pywapi claims to support Yahoo, Weather.com
# and NOAA, but its NOAA support doesn't work.
sources = [ 'Yahoo', 'Weather.com' ]

class WeatherWin(gtk.Window) :
    def __init__(self, cities, debug=False):
        super(WeatherWin, self).__init__()

        self.mainbox = gtk.Table(rows=len(cities), columns=len(sources))
        self.add(self.mainbox)

        self.cityboxes = []
        self.nextrow = 0

        self.bigfont = 'Sans 16'

        self.updating = False

        self.debug = debug

    def add_city(self, cityname):
        # pywapi spews warnings for non-unicode strings
        city = unicode(cityname)
        code, name = WeatherWin.get_code(city)
        if not code:
            print "No data for", city
            return

        thisbox = {}
        thisbox['code'] = code
        thisbox['name'] = name

        label = gtk.Label(name)
        label.modify_font(pango.FontDescription(self.bigfont))
        self.mainbox.attach(label,
                            0, len(sources)+1,
                            self.nextrow, self.nextrow+1,
                            xpadding=5, ypadding=5)
        self.nextrow += 1

        def add_group_widgets(name):
            '''Add widgets for one weather source'''
            letter = name[0]

            iframe = gtk.Frame(name)
            iframe.set_label_align(1.0, .5)
            ivbox = gtk.VBox()
            iframe.add(ivbox)
            hbox = gtk.HBox()
            ivbox.pack_start(hbox)

            idx = 'curtemp' + letter
            thisbox[idx] = gtk.Label()
            thisbox[idx].set_alignment(0., .5)
            thisbox[idx].set_padding(5, 0)
            #thisbox[idx].modify_bg(gtk.STATE_NORMAL,
            #                             gtk.gdk.Color(65535, 65535, 0))
            thisbox[idx].modify_font(pango.FontDescription(self.bigfont))
            hbox.pack_start(thisbox[idx])

            idx = 'curcond' + letter
            thisbox[idx] = gtk.Label()
            thisbox[idx].set_alignment(0., .5)
            hbox.pack_start(thisbox[idx])

            hbox = gtk.HBox()
            ivbox.pack_start(hbox)
            thisbox['expecting' + letter] = gtk.Label()
            hbox.pack_start(thisbox['expecting' + letter])

            return iframe

        for i, source in enumerate(sources):
            iframe = add_group_widgets(source)
            self.mainbox.attach(iframe, i, i+1, self.nextrow, self.nextrow+1)
            iframe.show_all()

        self.nextrow += 1

        self.cityboxes.append(thisbox)

    def run(self):
        self.connect("delete_event", gtk.main_quit)
        self.connect("destroy", gtk.main_quit)
        self.winsig = self.connect("configure_event", self.configure_event)

        self.mainbox.show_all()
        self.show_all()

        # set a timeout
        gobject.timeout_add(300000, self.timer_func)

        gtk.main()

    def update_weather(self):
        # Since gtk is too lame to prevent recursive expose or configure events,
        # and it has no way (that works) to block or temporarily disable them
        # during an event handler, set this flag to indicate we're inside
        # an event handler and prevent infinite loops:
        if self.updating:
            return
        self.updating = True

        if self.debug:
            print "Updating"
        def update_boxes(l, temp, condition, forecast):
            box['curtemp' + l].set_text(temp)
            box['curcond' + l].set_text(condition)
            box['expecting' + l].set_text(forecast)

        for box in self.cityboxes:
            if 'Yahoo' in sources:
                if self.debug:
                    print "Getting from Yahoo ..."
                weatherY = pywapi.get_weather_from_yahoo(box['code'],
                                                         'imperial')
                if self.debug:
                    pprint(weatherY)
                try:
                    update_boxes('Y', weatherY['condition']['temp'],
                                 weatherY['condition']['text'] + \
                                ', humidity ' +  \
                                     weatherY['atmosphere']['humidity'],
                                 'Expecting %s, %s' % \
                                     (weatherY['forecasts'][0]['high'],
                                      weatherY['forecasts'][0]['text']))
                except KeyError, e:
                    if 'error' in weatherY:
                        print weatherY['error']
                    else:
                        print e
                        print "KeyError with Yahoo update: Yahoo returned"
                        pprint(weatherY)

            if 'Weather.com' in sources:
                if self.debug:
                    print "Getting from Weather.com ..."
                weatherW = pywapi.get_weather_from_weather_com(box['code'],
                                                               'imperial')
                if self.debug:
                    pprint(weatherW)
                try:
                    update_boxes('W',
                                 weatherW['current_conditions']['temperature'],
                                 weatherW['current_conditions']['text'],
                                 'Humidity ' + \
                                   weatherW['current_conditions']['humidity'] \
                                   + ', Dewpoint: ' + \
                                   weatherW['current_conditions']['dewpoint'])
                except KeyError, e:
                    if 'error' in weatherW:
                        print weatherW['error']
                    else:
                        print e
                        print "KeyError with Weather.com update: read"
                        pprint(weatherW)

        self.updating = False

    # Some generic weather utilities:

    @staticmethod
    def get_code(city):

        print "Getting location code for", city
        loclist = pywapi.get_location_ids(city)
        # print loclist

        if not loclist and ' ' in city:
            # As of Oct 24 2013, get_location_ids doesn't work for anything
            # with a space in it, even if it's an exact match for a known
            # location. And searches only work if you start with the
            # right letters (e.g. you can find San Jose, CA searching
            # for "San" but not for "Jose").
            # So if we get a null result, try searching only up to the
            # first space, then see if we get a match.
            searchcity = city[0:city.find(' ')]
            loclist = pywapi.get_location_ids(searchcity)

        if not loclist:
            return None, None

        loc = None
        if len(loclist.keys()) == 1:
            loc = loclist.keys()[0]
        else:
            # First see if any of the sites matches exactly
            for key in loclist.keys():
                if loclist[key].lower() == city.lower():
                    # print "Found an exact match:", key, loclist[key]
                    loc = key

            if not loc:
                print "Sites matching", city, ':'
                pprint(loclist)
                return None, None

        return loc, loclist[loc]

    def configure_event(self, widget, event) :
        #self.window.freeze_updates()
        #self.signal_handler_block(self.winsig)
        if self.debug:
            print "Configure event"
        self.update_weather()
        #self.window.thaw_updates()
        #self.signal_handler_unblock(self.winsig)


    def timer_func(self) :
        if self.debug:
            print "Timer"
        self.update_weather()
        return True

def Usage():
    print "Usage: %s city [city2 city3 ...]" % os.path.basename(sys.argv[0])
    sys.exit(1)

if __name__ == '__main__':
    debug = False
    if len(sys.argv) <= 1:
        Usage()

    win = WeatherWin(sys.argv[1:], debug=debug)

    for city in sys.argv[1:]:
        win.add_city(city)

    if debug:
        print "Debug mode: not forking"
        win.run()
    else:
        rc = os.fork()
        if not rc:
            win.run()
        else:
            sys.exit(0)

