#!/usr/bin/env python

# Change brightness incrementally using xrandr
# since the older XF86VidModeSetGammaRamp() method no longer works.

# Usage: xbright [val|+val|-val]
# val is floating point and can go from 0 to 1 (or maybe higher?)

import sys, os

# There is an xrandr library for python:
# from Xlib import X, display
# from Xlib.ext import randr
# but it has no documentation and no examples, so rather than spending
# 2 days trying to figure out the API from reading the entire source,
# I can spend 10 minutes and parse output from /usr/bin/xrandr instead:
import subprocess
XRANDR = "/usr/bin/xrandr"

def get_brightness():
    # xrandr --verbose | grep -i brightness
    proc = subprocess.Popen([XRANDR, "--verbose"],
                            shell=False, stdout=subprocess.PIPE)
    s = proc.communicate()[0]
    if not s:
        print("No output from xrandr --verbose!")
        sys.exit(1)

    monitor = None
    s = s.decode()
    for line in s.split('\n'):
        line = line.strip()
        words = line.split()
        if len(words) > 1 and words[1] == "connected":
            monitor = words[0]
        elif line.startswith("Brightness: "):
            if not monitor:
                print("Warning: couldn't tell which monitor to use")
            return (float(line[12:]), monitor)
    print("No Brightness line in xrandr --verbose!")
    sys.exit(1)

def set_brightness(new_brightness, redshift=True):
    '''Set the brightness.
       If redshift is True, then adjust the color balance
       to get redder as the screen gets dimmer, for evening use.
    '''
    args = [ XRANDR ]

    if monitor:
        args.append("--output")
        args.append(monitor)

    args.append("--brightness")
    args.append(str(new_brightness))

    if redshift:
        red = (1.0 + new_brightness) / 2.
        blue = new_brightness
        green = (red*2 + blue) / 3.
        print(red, green, blue)
        args.append("--gamma")
        args.append('%0.2f:%0.2f:%0.2f' % (red, green, blue))

    subprocess.call(args)

def Usage():
    print("Usage: %s [b | +b | -b]" % os.path.basename(sys.argv[0]))
    sys.exit(1)

if __name__ == "__main__":
    # We need to call cur_brightness even if we're setting an absolute
    # brightness, because we need to get the relevant monitor.
    cur_brightness, monitor = get_brightness()

    if len(sys.argv) <= 1:
        print("Currently brightness is %.1f on monitor %s\n" % (cur_brightness,
                                                                monitor))
        Usage()

    if sys.argv[1][0] == '-':
        b = cur_brightness - float(sys.argv[1][1:])
        if b < 0: b = 0
    elif sys.argv[1][0] == '+':
        b = cur_brightness + float(sys.argv[1][1:])
        if b > 1: b = 1
    else:
        b = float(sys.argv[1])

    set_brightness(b)
