#! /usr/bin/env python3

# Search for IP clients on the current network.
# Only tested on Linux; requires ping or the Linux arguments for arp.
# ipsearch with no arguments uses ping; it takes a while but should be reliable.
# ipsearch -a uses arp only, which is fast but only shows
# hosts in the arp cache.

import sys
import subprocess
import socket
import fcntl
import struct
import re

try:
    from arpreq import arpreq
except:
    arpreq = None

try:
    from mac_lookup import match_mac
except:
    match_mac = None

def ping(host):
    """Ping a host by name or address.
       return True if it answers, False otherwise.
    """
    rv = subprocess.call(["ping", "-q", "-c", "1", "-W", "1", host],
                         stdout = subprocess.PIPE,
                         stderr = subprocess.PIPE)
    if rv == 0:
        return ""
    return None

def arp(host):
    """Call arp -a on an address.
       return True if it answers, False otherwise.
    """
    # print("host", host)
    proc = subprocess.Popen(["arp", "-a", host],
                         stdout = subprocess.PIPE,
                         stderr = subprocess.PIPE)
    proc_out = proc.communicate()[0].strip()
    # print("proc_out is '%s'" % proc_out)
    if b"no match found" in proc_out:
        # print("no match found, returning none")
        return None
    # else:
    #     print("'no match found' isn't in '%s'" % proc_out)
    if b"<incomplete>" in proc_out:
        return None

    match = re.search(b'([0-9A-F]{2}[:-]){5}([0-9A-F]{2})', proc_out, re.I)
    if match:
        return match.group().decode("utf-8")
    return None

def ip_addr(iface):
    """Get the IP address of the interface (e.g. eth0)
    """
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    info = fcntl.ioctl(s.fileno(),
                       0x8915,  # SIOCGIFADDR
                       struct.pack('256s', bytes(iface[:15], "utf-8")))
    return socket.inet_ntoa(info[20:24])

def scan(iface="eth0", ping_fn=ping, ping_first=True):
    myip = ip_addr(iface)
    print("My IP is", myip, "on", iface)
    mynetwork = '.'.join(myip.split('.')[0:3])
    print("My network is", mynetwork)
    fmt = "%16s  %18s  %12s  %s"

    for h in range(1, 255):  # I know, it should adjust based on net class
        hostip = "%s.%d" % (mynetwork, h)

        if ping_first:
            out = ping_fn(hostip)

        if arpreq:
            mac = arpreq(hostip)
        else:
            mac = arp(hostip)

        if not mac:
            continue

        if match_mac:
            oui = match_mac(mac)
        else:
            oui = ''

        try:
            hostname, blah1, blah2 = socket.gethostbyaddr(hostip)
        except:
            hostname = '?'

        if hostip == myip:
            print(fmt % (hostip, mac, hostname, oui), "(that's me)")
        else:
            print(fmt % (hostip, mac, hostname, oui))

if __name__ == "__main__":
    def Usage():
        print("""Usage: %s [-a] [-p]
-p: ping each host first, in case they weren't in the arp cache already
-a: Use arp -a to ping.
""" % sys.argv[0])
        sys.exit(1)

    ifaces = [ "eth0", "wlan0" ]
    myip = None

    for iface in ifaces:
        try:
            myip = ip_addr(iface)
            break
        except OSError:
            continue

    if not myip:
        print("Couldn't find my IP address")
        sys.exit(1)

    try:
        if len(sys.argv) > 1 and sys.argv[1].startswith("-a"):
            scan(iface, arp)
        elif len(sys.argv) > 1 and sys.argv[1].startswith("-p"):
            scan(iface, ping_first=False)
        elif len(sys.argv) > 1:
            Usage()
        else:
            scan(iface)

    except KeyboardInterrupt:
        print("Interrupt")
