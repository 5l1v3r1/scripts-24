#! /usr/bin/env python

# Search for IP clients on the current network.
# Only tested on Linux; requires ping or the Linux arguments for arp.
# ipsearch with no arguments uses ping; it takes a while but should be reliable.
# ipsearch -a uses arp only, which is fast but only shows
# hosts in the arp cache.

import sys, subprocess, socket, fcntl, struct

def ping(host):
    """Ping a host by name or address.
       return True if it answers, False otherwise.
    """
    rv = subprocess.call(["ping", "-q", "-c", "1", "-W", "1", host],
                         stdout = subprocess.PIPE,
                         stderr = subprocess.PIPE)
    if rv == 0:
        return ""
    return None

def arp(host):
    """Call arp -a on an address.
       return True if it answers, False otherwise.
    """
    # print "host", host
    proc = subprocess.Popen(["arp", "-a", host],
                         stdout = subprocess.PIPE,
                         stderr = subprocess.PIPE)
    proc_out = proc.communicate()[0].strip()
    # print "proc_out is '%s'" % proc_out
    if "no match found" in proc_out:
        # print "no match found, returning none"
        return None
    # else:
    #     print "'no match found' isn't in '%s'" % proc_out
    if "<incomplete>" in proc_out:
        return None
    # print "found something"
    return proc_out

def ip_addr(iface):
    """Get the IP address of the interface (e.g. eth0)
    """
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    info = fcntl.ioctl(s.fileno(),
                       0x8915,  # SIOCGIFADDR
                       struct.pack('256s', iface[:15]))
    return socket.inet_ntoa(info[20:24])

def scan(ping_fn = ping):
    ip = ip_addr("eth0")
    print "My IP is", ip
    network = '.'.join(ip.split('.')[0:3])
    print "My network is", network
    try:
        if len(sys.argv) <= 1:
            for h in xrange(1, 255):  # Yes, it should adjust based on net class
                host = "%s.%d" % (network, h)
                out = ping_fn(host)
                if ping_fn != arp:
                    arpout = arp(host)
                else:
                    arpout = ""
                if out != None:
                    print("%s: %s %s" % (host, out, arpout))

    except KeyboardInterrupt:
        print "Interrupt"

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1].startswith("-a"):
        scan(arp)
    else:
        scan()
